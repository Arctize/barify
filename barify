#!/bin/bash

# Author: Patrick Wicki <patrick.wicki96 at gmail dot com>

# This is a script to adjust volume and brightness levels and show an indicator
# using either dunst (Xorg/Wayland) or mako (Wayland)
# The primary purpose is to draw a bar as a visual indicator.
# An alternative on wayland would be to use wob (https://github.com/francma/wob)
# but that doesn't support custom colors (yet), while dunst and mako can of
# course be configured to fit any theme.

# Requirements:
#  Xorg: dunst & dunstify
#  Wayland: notify-send and mako
#  ttf-font-awesome for the icons
#  pulseaudio (if you want support for others, feel free to contribute)

usage="Usage: $(basename "$0") MODE ACTION
Modify volume or brightness and indicate level as
a bar via notifications (either dunst or mako).

Example:
   barify vol up

Arguments:
   MODE:
      Volume:     volume|vol|v
      Brightness: brightness|bright|b
   ACTION:
      Increase:   up|u|inc|i
      Decrease:   down|dec|d
      Mute:       mute|m"

MODE_VOLUME=1
MODE_BRIGHTNESS=2
ACTION_INCREASE=1
ACTION_DECREASE=2
ACTION_MUTE=3
ICON_VOLUME=
ICON_BRIGHTNESS=
ICON_MUTE=

mode=
action=
icon=

case $1 in
v*)
	mode=$MODE_VOLUME
	icon=$ICON_VOLUME
	case $2 in
	up | u | inc | i)
		action=$ACTION_INCREASE
		;;
	down | dec | d)
		action=$ACTION_DECREASE
		;;
	mute | m)
		action=$ACTION_MUTE
		;;
	*)
		echo "$usage"
		exit 1
		;;
	esac
	;;
b*)
	mode=$MODE_BRIGHTNESS
	icon=$ICON_BRIGHTNESS
	case $2 in
	up | u | inc | i)
		action=$ACTION_INCREASE
		;;
	down | dec | d)
		action=$ACTION_DECREASE
		;;
	*)
		echo "$usage"
		exit 1
		;;
	esac
	;;
*)
	echo "$usage"
	exit 1
	;;
esac

# Lock to assert only a single instance is running.
# xbacklight for example can take quite a while to execute,
# which can lead to the bar going back and forth if multiple instances
# are running simultanously.
LOCKFILE="/tmp/.$(basename "$0").lock"
TIMEOUT=0.1
touch "$LOCKFILE"
exec {FD}<>"$LOCKFILE"

if ! flock -x -w $TIMEOUT $FD; then
	echo "Failed to obtain a lock within $TIMEOUT seconds"
	echo "Another instance of $(basename "$0") is probably running."
	exit 1
fi

function get_volume {
	amixer get Master | grep '%' | head -n 1 | cut -d '[' -f 2 | cut -d '%' -f 1
}

function is_mute {
	amixer get Master | grep '%' | grep -oE '[^ ]+$' | grep off > /dev/null
}

function get_brightness {
	if type xbacklight &>/dev/null; then
		xbacklight -get | cut -d '.' -f 1
	elif type brightnessctl &>/dev/null; then
		brightnessctl -m | cut -d ',' -f 4 | tr -d '%'
	fi
}

# Function to repeat a character
# arg $1: number of repetitions
# arg $2: char to be printed
function rep_char {
	for ((i = 0; i < $1; i++)); do
		printf "%s" "$2"
	done
}

function send_notification {
	# On dunst, the bar is printed with a fixed width and a padding
	# character ("░") so it can be used in a dynamically sized dunst frame
	# and is therefore at least somewhat portable between hidpi and
	# normal screens.
	if pgrep dunst &>/dev/null; then
		if [ $mode == $MODE_VOLUME ] && is_mute; then
			dunstify -i NUL -r 2593 -u normal "$ICON_MUTE  Muted"
		else
			length=25 # Number characters for the bar
			div=$((100 / length))
			total=$((100 / div))
			left=$(($1 / div))
			right=$((total - left))
			bar=$(rep_char $left "█")$(rep_char $right "░")

			dunstify -i NUL -r 2593 -u normal "$icon $bar"
		fi
		return
	fi

	# Check if mako is installed. Doesn't need to be running, because it is
	# triggered automatically via D-Bus activation
	if type mako &>/dev/null; then
		# We replace the existing notification using the synchronous hint merged in
		# https://github.com/emersion/mako/pull/270 (Mako version 1.6)
		# Previously, we worked around this by calling `makoctl dismiss` here.
		if [ $mode == $MODE_VOLUME ] && is_mute; then
			notify-send "$ICON_MUTE Muted" -h int:value:"$1" -t 5000 -h string:x-canonical-private-synchronous:barify-$mode
		else
			notify-send "$icon $1%" -h int:value:"$1" -t 5000 -h string:x-canonical-private-synchronous:barify-$mode
		fi
		return
	fi

	echo 'Warning: Neither dunst nor mako was found.' 1>&2
}

if [ $mode == $MODE_VOLUME ]; then
	case $action in
	"$ACTION_INCREASE")
		# Set the volume on (if it was muted)
		amixer -D pulse set Master on >/dev/null
		# Up the volume (+ 5%)
		amixer -D pulse sset Master 4%+ >/dev/null
		send_notification "$(get_volume)"
		;;
	"$ACTION_DECREASE")
		amixer -D pulse set Master on >/dev/null
		amixer -D pulse sset Master 4%- >/dev/null
		send_notification "$(get_volume)"
		;;
	"$ACTION_MUTE")
		# Toggle mute
		amixer -D pulse set Master 1+ toggle >/dev/null
		send_notification "$(get_volume)"
		;;
	esac
elif [ $mode == $MODE_BRIGHTNESS ]; then
	case $action in
	"$ACTION_INCREASE")
		if type xbacklight &>/dev/null; then
			xbacklight +8
		elif type brightnessctl &>/dev/null; then
			brightnessctl -q set 8%+
		fi
		send_notification "$(get_brightness)"
		;;
	"$ACTION_DECREASE")
		if type xbacklight &>/dev/null; then
			xbacklight -8
		elif type brightnessctl &>/dev/null; then
			brightnessctl -q set 8%-
		fi
		send_notification "$(get_brightness)"
		;;
	esac
fi
